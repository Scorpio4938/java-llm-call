/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = project.project_group
version = project.project_version // + "." + project.release_number

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    //Env
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    implementation 'org.json:json:20240205'
    implementation 'com.google.code.gson:gson:2.11.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// sourceSets.main.resources {
//     srcDirs = ["src/main/resources", "../"] // Include root directory
//     includes = ["**/*.env"] // Only include .env files from root
// }

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(Jar) {   
    exclude('.env')
}

// Add publishing configuration at the bottom
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.project_group
            artifactId = rootProject.name
            version = project.project_version

            pom {
                name.set(rootProject.name)
                description.set('A very basic and brief lib for calling llms in java.')
                url.set('https://github.com/scorpio4938/java-llm-call')
                licenses {
                    license {
                        name.set('The MIT License')
                        url.set('https://opensource.org/licenses/MIT')
                    }

                }
                developers {
                    developer {
                        id.set('scorpio4938')
                        name.set('Scorpio4938')
                        email.set('scorpio493.8@gmail.com')
                    }
                }

                scm {
                    connection.set('scm:git:git://github.com/Scorpio4938/java-llm-call.git')
                    developerConnection.set('scm:git:ssh://git@github.com/Scorpio4938/java-llm-call.git')
                    url.set('https://github.com/Scorpio4938/java-llm-call')
                }
            }
        }
    }
    
    // Configure repositories to publish to
    repositories {
        // mavenLocal()
        // maven {
        //     name = 'OSSRH'
        //     url = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
        //     credentials {
        //         println "OSSRH_USERNAME: " + System.getenv("OSSRH_USERNAME")
        //         println "OSSRH_PASS: " + System.getenv("OSSRH_PASSWORD")
        //         username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
        //         password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        //     }
        // }

        maven {
            name = 'MavenCentral'
            url = uri('https://central.sonatype.org/service/local/staging/deploy/maven2/')
            credentials {
                println "OSSRH_USERNAME: " + System.getenv("OSSRH_USERNAME")
                println "OSSRH_PASS: " + System.getenv("OSSRH_PASSWORD")
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    // println "Signing key ID: " + findProperty("SIGNING_KEYID")
    // println "Signing key ID: " + System.getenv('SIGNING_KEYID')
    // println "Secret key ID: " + System.getenv('ORG_GRADLE_PROJECT_SIGNING_KEYID')
    // println "Secret key ring file: " + findProperty('ORG_GRADLE_PROJECT_SIGNING_SECRETKEYRINGFILE')
    // println "Secret key ring file: " + findProperty('SIGNING_SECRETKEYRINGFILE')
    // println "Signing password provided? " + System.getenv('ORG_GRADLE_PROJECT_SIGNING_PASSWORD')

    // Reads the full content of the secret.asc file into a variable
    // def secretKey = file('secret.asc').exists() ? file('secret.asc').text : ""
    // def signingKeyPath = findProperty("SIGNING_KEY_PATH").exists() ? 
    // if (!signingKeyPath) {
        // throw new GradleException("SIGNING_KEY_FILE is not defined.")
    // }
    // def secretKey = file(signingKeyPath).text

    useGpgCmd()
    // required { !gradle.startParameter.taskNames.any { it.contains('publishToMavenLocal') } }
    // required = { !gradle.startParameter.taskNames.any { it.contains('publish') } }
    // useInMemoryPgpKeys(
        // System.getenv('ORG_GRADLE_PROJECT_signingKeyId'),
        // System.getenv('ORG_GRADLE_PROJECT_signingPassword'),
        // secretKey,
        // secretKey,
        // System.getenv('ORG_GRADLE_PROJECT_SIGNING_PASSWORD'),
        // File(System.getenv('ORG_GRADLE_PROJECT_signingSecretKeyRingFile'))

    // )
    sign publishing.publications.mavenJava

    // Use this for environment variables ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword
    // def signingKey = System.getenv('ORG_GRADLE_PROJECT_signingKey')
    // def signingPassword = System.getenv('ORG_GRADLE_PROJECT_signingPassword')
    
    // if (signingKey && signingPassword) {
    //     useInMemoryPgpKeys(signingKey, signingPassword)
    //     sign publishing.publications.mavenJava
    // } else {
    //     logger.warn('Signing skipped - missing PGP credentials')
    // }

    // if (project.hasProperty("signing.enabled") && project.property("signing.enabled") == "false") {
    //     logger.lifecycle("Signing is disabled for this build.")
    // } else if (project.hasProperty('signingKey') && project.hasProperty('signingPassword')) {
    //     useInMemoryPgpKeys(project.property('signingKey'), project.property('signingPassword'))
    //     sign publishing.publications.mavenJava
    // } else {
    //     throw new GradleException("Signing credentials not found. Set signingKey and signingPassword, or disable signing locally.")
    // }
}


// Create sources JAR task
// task sourcesJar(type: Jar) {
//     classifier = 'sources'
//     from sourceSets.main.allJava
// }